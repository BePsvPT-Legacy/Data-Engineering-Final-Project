#!/usr/bin/env php
<?php
error_reporting(E_ALL);

require_once __DIR__.'/vendor/autoload.php';

$options = getopt('p:s:');

if (! isset($options['p']) || false === ($path = realpath($options['p']))) {
    exit('p(path) argument is required.'.PHP_EOL);
} elseif (! isset($options['s'])) {
    exit('s(server) argument is required.'.PHP_EOL);
}

list($address, $port) = explode(':', $options['s']);

function sendData($data) {
    global $address;
    global $port;

    $loop = React\EventLoop\Factory::create();

    $tcpConnector = new React\SocketClient\TcpConnector($loop);

    $tcpConnector->create($address, $port)->then(function (React\Stream\Stream $stream) use ($data) {
        $stream->bufferSize = BUFFER_SIZE;

        $stream->end($data);
    });

    $loop->run();
}

$lastIndex = indexDir($path);

$loop = React\EventLoop\Factory::create();

$tcpConnector = new React\SocketClient\TcpConnector($loop);

$tcpConnector->create($address, $port)->then(function (React\Stream\Stream $stream) use (&$lastIndex) {
    $stream->on('data', function ($data) use ($stream, &$lastIndex) {
        $data = unpackData($data);

        switch ($data['type']) {
            case 'index':
                echo 'Get file list.'.PHP_EOL;

                $lastIndex = $data['data'];

                $stream->end();
                break;

            default:
                $stream->end();
                break;
        }
    });

    $stream->write(packData('index'));
});

$loop->run();

while (true) {
    $newIndex = indexDir($path);

    $newFiles = array_diff_key($newIndex, $lastIndex);
    $removeFiles = array_diff_key($lastIndex, $newIndex);

    if (! empty($newFiles) && ! empty($removeFiles)) {
        foreach ($newFiles as $newHash => $new) {
            foreach ($removeFiles as $oldHash => $old) {
                if ($new['type'] === $old['type'] && $new['size'] === $old['size'] && $new['quickHash'] === $old['quickHash']) {
                    if ($new['path'] !== $old['path']) {
                        $renameFiles[] = [
                            'old' => $old['path'],
                            'new' => $new['path'],
                        ];
                    }

                    unset($newFiles[$newHash], $removeFiles[$oldHash]);

                    break;
                }
            }
        }

        if (! empty($renameFiles)) {
            echo 'Send rename file list'.PHP_EOL;

            sendData(packData('rename', $renameFiles));

            unset($renameFiles);
        }
    }

    if (! empty($removeFiles)) {
        echo 'Send deleted file list.'.PHP_EOL;

        sendData(packData('remove', $removeFiles));
    }

    if (! empty($newFiles)) {
        foreach ($newFiles as $hash => $file) {
            $fullPath = file_build_path($path, $file['path']);

            echo 'Upload file: '.$fullPath.PHP_EOL;

            sendData(packData('create', array_merge($file, ['hash' => $hash])));

            $fp = fopen($fullPath, "rb");

            while ($string = fread($fp, FREAD_SIZE)) {
                sendData(packData('uploading', [
                    'hash' => $hash,
                    'content' => base64_encode($string),
                ]));
            }

            fclose($fp);

            sendData(packData('uploaded', [
                'hash' => $hash,
                'checksum' => md5_file($fullPath),
            ]));
        }
    }

    $lastIndex = indexDir($path);

    sleep(2);
}
